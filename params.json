{"name":"Hula-lang","tagline":"Hula is a simple scripting language for writing applications. ","body":"# Hula-lang \r\n\r\nHula is a simple scripting language for writing applications. \r\n\r\nThe core language goals are:\r\n\r\n* Readability - scripts should be readable without knowing the syntax\r\n* Extensibility - it should be easy to plug in new functionality\r\n* Flexibility - scripts can be modified without a build\r\n\r\nHula was designed for orchestrating underlying services. As such:\r\n\r\n* Hula is good at modelling and gluing together services\r\n* Hula is poor at capturing business logic - this should live in underlying services  \r\n\r\n# Syntax\r\n\r\n\r\nA Hula script looks like this:\r\n\r\n```SQL\r\nSet greeting=\"Hello, World!\"\r\nEcho $greeting\r\n```\r\n\r\n\r\nHula scripts contain a set of commands which (almost) always follow this structure:\r\n\r\n\r\n```SQL\r\nCommand Parameter1Name=Parameter1Value, Parameter2Name=Parameter2Value as ReturnVariable\r\n```\r\n\r\nIn the above script: \r\n\r\n* The commands are **Set** and **Echo**.\r\n* greeting is a parameter passed into the **Set** command, with value \"Hello, World!\"\r\n* $greeting is a reference to a variable named greeting (created by the **Set** command). Variable references always have a leading dollar ($).\r\n\r\n\r\nOur greeting script above could have read:\r\n\r\n```SQL\r\nNewMap greeting=\"Hello, World!\" as greetingMap\r\nEcho \"Hula says $greetingMap.greeting\"\r\n```\r\n \r\nIn the above script:\r\n\r\n* **NewMap** is a command which creates a Map object.\r\n* greetingMap is the return variable from the **NewMap** command.\r\n* The **Echo** command embeds a reference to the greetingMap variable, using Dot Notation to get the value of the greeting key (set by the **NewMap** command).\r\n\r\n### Nested Blocks\r\n\r\nSome commands support nested blocks, as shown below:\r\n\r\n```SQL\r\nSet names=\"Jeff,Jim,John\"\r\n\r\n# turns the CSV string into a list\r\nTokenise $names as nameList\r\nLoop $nameList as name\r\n   Echo \"Hello, $name\"\r\nEnd\r\n```\r\n\r\nIn the above script:\r\n\r\n* The **Loop** command takes a list as a parameter.\r\n* The nested block is executed for each element in the list.\r\n* For each execution, the $name variable contains the next element in the list.\r\n\r\nFor further information please see the [Quick Start Guide].\r\n\r\n# Getting Started\r\n\r\nHula-lang is packaged as an project which you can import directly into eclipse. \r\n\r\nAlternatively you can test Hula scripts using the batch/shell scripts supplied:\r\n\r\n**Windows:**\r\n\r\n\tHula Greetings\r\n\t\r\n**Linux/Mac:**\r\n\r\n\tHula.sh Greetings\r\n\r\nNote: The test scripts live in test/scripts\r\n\r\n# Latest Version\r\n\r\nv0.1 alpha 1\r\n\r\n# Contributing\r\n\r\n* Please raise any issues in the github issue tracker\r\n\r\n# Author\r\n\r\n* [http://github.com/simoncurd]\r\n\r\n# Copyright and License\r\n\r\n[Apache 2 License]\r\n\r\nCopyright 2013 Simon Curd simoncurd@gmail.com\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at\r\n\r\n[http://www.apache.org/licenses/LICENSE-2.0]\r\n\r\nUnless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}